class UnionFind {
    int[] father;
    public UnionFind(int n) {
        father = new int[n];
        Arrays.fill(father, -1);
    }
    public int find(int x) {
        if (father[x] < 0) {
            return x;
        }
        return father[x] = find(father[x]);
    }
    public void union(int a, int b) {
        a = find(a);
        b = find(b);
        if (a != b) {
            father[a] += father[b];
            father[b] = a;
        }
    }
    public int father(int x) {
        return father[x];
    }
    
}

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        Arrays.sort(initial);
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1)
                    uf.union(i, j);
            }
        }
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < initial.length; i++) {
            int a = uf.find(initial[i]);
            map.put(a, map.getOrDefault(a, 0) + 1);
        }
        int res = -1;
        int max = 0;
        for (int i = 0; i < initial.length; i++) {
            int a = uf.find(initial[i]);
            if (map.get(a) == 1 && max < -uf.father(a)) {
                max = -uf.father(a);
                res = i;
            }
        }
        if (res != -1) {
            return initial[res];
        }
        return initial[0];
    }
}
